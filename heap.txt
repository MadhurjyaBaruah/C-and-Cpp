//heap
#include <iostream>
using namespace std;

void h(int a[], int n, int i) {
    int m = i, l = 2*i+1, r = 2*i+2;
    if (l<n && a[l]>a[m]) m = l;
    if (r<n && a[r]>a[m]) m = r;
    if (m!=i) swap(a[i], a[m]), h(a,n,m);
}

void hs(int a[], int n) {
    for (int i=n/2-1;i>=0;i--) h(a,n,i);
    for (int i=n-1;i>0;i--) swap(a[0],a[i]), h(a,i,0);
}

int main() {
    int a[]={4,2,5,1,3}, n=5;
    hs(a,n);
    for (int i=0;i<n;i++) cout<<a[i]<<" ";
}

//--------------------------------------------------------------

//merge
#include <iostream>
using namespace std;

void merge(int a[], int l, int m, int r) {
    int i = l, j = m+1, k = 0, b[r-l+1];
    while (i <= m && j <= r) b[k++] = a[i] < a[j] ? a[i++] : a[j++];
    while (i <= m) b[k++] = a[i++];
    while (j <= r) b[k++] = a[j++];
    for (i = l, k = 0; i <= r; i++) a[i] = b[k++];
}

void sort(int a[], int l, int r) {
    if (l >= r) return;
    int m = (l + r) / 2;
    sort(a, l, m);
    sort(a, m+1, r);
    merge(a, l, m, r);
}

int main() {
    int a[] = {5, 2, 9, 1, 6, 3}, n = 6;
    sort(a, 0, n-1);
    for (int i = 0; i < n; i++) cout << a[i] << " ";
}




//---------------------------------------------------------------

//quick
#include <iostream>
using namespace std;

void quickSort(int a[], int l, int r) {
    if (l >= r) return;
    int i = l, j = r, pivot = a[(l + r) / 2];
    while (i <= j) {
        while (a[i] < pivot) i++;
        while (a[j] > pivot) j--;
        if (i <= j) swap(a[i++], a[j--]);
    }
    quickSort(a, l, j);
    quickSort(a, i, r);
}

int main() {
    int a[] = {4, 2, 5, 1, 3}, n = 5;
    quickSort(a, 0, n - 1);
    for (int i = 0; i < n; i++) cout << a[i] << " ";
    return 0;
}

//----------------------------------------------------------------

//selection
#include<iostream>
using namespace std;
void SelectionSort(int arr[] , int n){
	for (int i=0;i<n-1;i++){
		int min_index=i;
		for(int j = i+1; j<n ; j++){
			if(arr[j]< arr[min_index])
			min_index=j;
		}
		swap(arr[min_index] , arr[i]);
	}
}

int main(){
	int arr[]={5,9,2,7,1,4};
	int n= sizeof(arr)/sizeof(arr[0]);
	
	
	SelectionSort(arr,n);
	for (int i=0;i<n;i++){
		cout<<arr[i]<<" ";
	}
	
}

//-------------------------------------------------------------

//insertion
#include<iostream>
using namespace std;
void InSort(int arr[], int n){
	for(int i=1; i<n;i++){
		int key=arr[i];
		int j=i-1;
		while(j>=0 && arr[j]>key){
			arr[j+1] =arr[j];
			j--;
		}
		arr[j+1]=key;
	}
}


int main(){
	int arr[]={8,3,6,9,1,55,11};
	int n= sizeof(arr)/sizeof(arr[0]);
	InSort(arr,n);
	for(int i=0; i<n;i++)
		cout<<arr[i]<<" ";
	//cout<<endl;	
		
	return 0;
}

//----------------------------------------------------------------

//bubble
#include<iostream>
using namespace std;

void BuSort(int arr[] , int n){
	for (int i=0 ;i<n-1 ; i++){
		for(int j=0;j<n-i-1;j++){
			if(arr[j]>arr[j+1])
			swap(arr[j],arr[j+1]);
		}
	}
}

int main(){
	int arr[]={8,3,6,9,1,55,11};
	int n= sizeof(arr)/sizeof(arr[0]);
	
	BuSort(arr,n);
	for(int i=0; i<n;i++)
		cout<<arr[i]<<" ";
	//cout<<endl;	
		
//	return 0;
}


//----------------------------------------------

#include <iostream>
using namespace std;

int main() {
    int arr[] = {3, 5, 7, 9, 11};
    int target = 7;
    int size = 5;

    for (int i = 0; i < size; i++) {
        if (arr[i] == target) {
            cout << "Found at index " << i << endl;
            return 0;
        }
    }

    cout << "Not found" << endl;
    return 0;
}

//_______
#include <iostream>
using namespace std;

int main() {
    int arr[] = {1, 3, 5, 7, 9, 11};
    int target = 7;
    int left = 0, right = 5;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target) {
            cout << "Found at index " << mid << endl;
            return 0;
        }
        else if (arr[mid] < target) {
            left = mid + 1;
        }
        else {
            right = mid - 1;
        }
    }

    cout << "Not found" << endl;
    return 0;
}